Given a string s, return the longest palindromic substring in s.

Example 1:
Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.

Example 2:
Input: s = "cbbd"
Output: "bb"
 

Constraints:

1 <= s.length <= 1000
s consist of only digits and English letters.

SOLUTION:

Language - C++

#include <bits/stdc++.h>

using namespace std;

string Longest_Palindromic_Substring(string s)
{
  int n = s.size();
  int ans = 1;
  pair<int, int> p;
  p.first = 0;
  p.second = 0;
  int dp[n][n];
  for (int i = 0; i < n; i++)
  {
    for (int j = 0; j < n; j++)
    {
      dp[i][j] = 0;
    }
  }

  for (int i = 0; i < n; i++)
  {
    dp[i][i] = 1;
  }
  for (int i = 0; 1 + i < n; i++)
  {

    int j = 1 + i;
    if (s[i] == s[j])
    {
      p.first = i;
      p.second = j;
      ans = 2;
      dp[i][j] = 1;
    }
  }
  for (int gap = 2; gap < n; gap++)
  {
    for (int i = 0; i + gap < n; i++)
    {
      int j = gap + i;
      if (s[i] == s[j] && dp[i + 1][j - 1] == 1)
      {
        dp[i][j] = 1;
        if (j - i + 1 > ans)
        {
          ans = max(ans, j - i + 1);
          p.first = i;
          p.second = j;
        }
      }
    }
  }
  string rs = "";
  for (int i = p.first; i <= p.second; i++)
  {
    rs = rs + s[i];
  }
  return rs;
}
int main()
{

  string s1 = "babad";

  cout << Longest_Palindromic_Substring(s1) << endl;

  string s2 = "cbbd";

  cout << Longest_Palindromic_Substring(s2) << endl;

  return 0;
}